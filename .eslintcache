[{"/home/ssaberan/ChessGame/src/index.jsx":"1","/home/ssaberan/ChessGame/src/reportWebVitals.js":"2","/home/ssaberan/ChessGame/src/Application/App.jsx":"3","/home/ssaberan/ChessGame/src/ChessAI/OpeningBook/BlackOpeningBook.js":"4","/home/ssaberan/ChessGame/src/ChessAI/BestMove.js":"5","/home/ssaberan/ChessGame/src/ChessAI/Evaluation.js":"6"},{"size":512,"mtime":1609547947538,"results":"7","hashOfConfig":"8"},{"size":364,"mtime":1609816834372,"results":"9","hashOfConfig":"8"},{"size":2215,"mtime":1610414608011,"results":"10","hashOfConfig":"8"},{"size":2032,"mtime":1610325593981,"results":"11","hashOfConfig":"8"},{"size":1099,"mtime":1610413290705,"results":"12","hashOfConfig":"8"},{"size":1523,"mtime":1610326178324,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"jebpw0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ssaberan/ChessGame/src/index.jsx",[],["29","30"],"/home/ssaberan/ChessGame/src/reportWebVitals.js",[],"/home/ssaberan/ChessGame/src/Application/App.jsx",["31"],"import React, {Fragment, useState} from \"react\";\nimport \"./App.css\";\nimport Chessboard from \"chessboardjsx\";\nimport bestMove from \"../ChessAI/BestMove\";\nimport blackOpeningBook from \"../ChessAI/OpeningBook/BlackOpeningBook\";\n\nconst Chess = require(\"chess.js\");\n\nconst App = () => {\n  const [chess] = useState(\n    new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\")\n  );\n  const [fen, setFen] = useState(chess.fen());\n\n  const handleMove = (move) => {\n    if (chess.move(move)) {\n      const moves = chess.moves();\n      if (moves.length > 0) {\n        console.log('fen', chess.fen());\n        if (blackOpeningBook[chess.fen()]) {\n          chess.move(blackOpeningBook[chess.fen()]);\n        } else {\n          const [computerMove, _] = bestMove(chess, 2);\n          chess.move(computerMove);\n        }\n      }\n      setFen(chess.fen());\n    }\n  };\n\n  const boardWidth = (screenWidth, screenHeight) => {\n    if (screenWidth > screenHeight) {\n      return Math.floor(0.75 * screenHeight);\n    } else {\n      return Math.floor(0.75 * screenWidth);\n    }\n  };\n\n  return (\n    <div className=\"Center\">\n      {chess.turn() === \"w\" ? (\n        <Fragment>\n          {chess.game_over() ? (\n            <Fragment>\n              {chess.in_checkmate() ? (\n                <h1>Checkmate. Black wins.</h1>\n              ) : (\n                <h1>Draw</h1>\n              )}\n            </Fragment>\n          ) : (\n            <h1>White's turn</h1>\n          )}\n        </Fragment>\n      ) : (\n        <Fragment>\n          {chess.game_over() ? (\n            <Fragment>\n              {chess.in_checkmate() ? (\n                <h1>Checkmate. White wins.</h1>\n              ) : (\n                <h1>Draw</h1>\n              )}\n            </Fragment>\n          ) : (\n            <h1>Black's turn</h1>\n          )}\n        </Fragment>\n      )}\n      <Chessboard\n        calcWidth={({screenWidth, screenHeight}) =>\n          boardWidth(screenWidth, screenHeight)\n        }\n        position={fen}\n        onDrop={(move) =>\n          handleMove({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\",\n          })\n        }\n      />\n    </div>\n  );\n};\n\nexport default App;\n","/home/ssaberan/ChessGame/src/ChessAI/OpeningBook/BlackOpeningBook.js",[],"/home/ssaberan/ChessGame/src/ChessAI/BestMove.js",["32"],"import evaluate from \"./Evaluation\";\r\n\r\nconst bestMove = (chess, depth) => {\r\n  const moves = chess.moves().sort(() => Math.random() - 0.5);\r\n  const color = chess.fen().split(' ')[1];\r\n\r\n  let bestAct = '';\r\n  let bestEvaluation = color === 'w' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\r\n  let evaluation = 0;\r\n  let _ = {};\r\n\r\n  for (const move of moves) {\r\n    if (depth === 1) {\r\n      chess.move(move);\r\n      evaluation = evaluate(chess.board());\r\n      chess.undo();\r\n    } else if (depth > 1) {\r\n      chess.move(move);\r\n      [_, evaluation] = bestMove(chess, depth - 1);\r\n      chess.undo();\r\n    } else {\r\n      console.error('Invalid depth');\r\n    }\r\n\r\n    if (color === 'w') {\r\n      if (evaluation > bestEvaluation) {\r\n        bestEvaluation = evaluation;\r\n        bestAct = move;\r\n      }\r\n    } else if (color === 'b') {\r\n      if (evaluation < bestEvaluation) {\r\n        bestEvaluation = evaluation;\r\n        bestAct = move;\r\n      }\r\n    } else {\r\n      console.error('Invalid color');\r\n    }\r\n  }\r\n\r\n  return [bestAct, bestEvaluation];\r\n};\r\n\r\nexport default bestMove;","/home/ssaberan/ChessGame/src/ChessAI/Evaluation.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":23,"column":32,"nodeType":"39","messageId":"40","endLine":23,"endColumn":33},{"ruleId":"37","severity":1,"message":"38","line":19,"column":8,"nodeType":"39","messageId":"40","endLine":19,"endColumn":9},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]